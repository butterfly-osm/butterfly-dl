name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # Save changelog to file for multiline output
          echo "## Changes" > changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          
          # Also save to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  build:
    name: Build
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: butterfly-dl
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            output: butterfly-dl
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            output: butterfly-dl
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            output: butterfly-dl
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output: butterfly-dl.exe
            archive: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.output }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.output }}
          fi

      - name: Create archive
        id: archive
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          ARCHIVE_NAME="butterfly-dl-${VERSION}-${{ matrix.target }}"
          
          if [ "${{ matrix.archive }}" = "zip" ]; then
            # Windows zip
            7z a "${ARCHIVE_NAME}.zip" "./target/${{ matrix.target }}/release/${{ matrix.output }}"
            echo "archive_name=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
            echo "archive_path=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          else
            # Unix tar.gz
            mkdir -p "${ARCHIVE_NAME}"
            cp "target/${{ matrix.target }}/release/${{ matrix.output }}" "${ARCHIVE_NAME}/"
            cp README.md LICENSE "${ARCHIVE_NAME}/"
            tar czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"
            echo "archive_name=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
            echo "archive_path=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Generate checksum
        id: checksum
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            sha256sum "${{ steps.archive.outputs.archive_path }}" > "${{ steps.archive.outputs.archive_path }}.sha256"
          else
            shasum -a 256 "${{ steps.archive.outputs.archive_path }}" > "${{ steps.archive.outputs.archive_path }}.sha256"
          fi
          echo "checksum_file=${{ steps.archive.outputs.archive_path }}.sha256" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.archive.outputs.archive_path }}
          asset_name: ${{ steps.archive.outputs.archive_name }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.checksum.outputs.checksum_file }}
          asset_name: ${{ steps.archive.outputs.archive_name }}.sha256
          asset_content_type: text/plain

  checksums:
    name: Generate Combined Checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined checksums
        run: |
          # Create combined checksums file
          echo "# SHA256 Checksums for butterfly-dl ${{ needs.create-release.outputs.version }}" > checksums.txt
          echo "" >> checksums.txt
          
          # This step would ideally collect all the individual checksum files
          # For now, we'll create a placeholder that documents the process
          echo "Individual checksum files are available for each platform binary." >> checksums.txt
          echo "Verify downloads using: sha256sum -c <checksum-file>" >> checksums.txt

      - name: Upload Combined Checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain